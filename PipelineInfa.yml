AWSTemplateFormatVersion: "2010-09-09"
Description: 'CI/CD AWS Code - Commit, Pipeline, Build, Deploy LAMP web server'

Parameters:
  Environment:
    Description: An environment name that will be prefixed to resource names
    Type: String
  WebServerGP:
    Type: String
    Default: 'WebServerGP'
    Description: 'Web Server ec2 instance'
  CodeCommitRepository:
      Type: String
      Default: 'app-java-gp'
      Description: 'The repository name to pipeline'
  LogGroupName:
    Type: String
    Default: '/aws/codebuild/webservergp-pipeline'
    Description: 'The name of log group for CodeBuild'
  
  SlackWebhookURL:
    Type: String
    Description: The URL of the slack webhook
    Default: "https://hooks.slack.com/services/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"

Resources:
  # CodeBuild
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: GPCodeBuild
      Description: The build for gp app
      ServiceRole: !GetAtt CodePipelineRole.Arn
      Source:
        Type: CODEPIPELINE 
        BuildSpec: buildspec.yml
      Artifacts:
        Type: CODEPIPELINE 
      Environment:         
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
        Type: LINUX_CONTAINER
      LogsConfig:
          CloudWatchLogs:
              GroupName: !Ref LogGroupName
              StreamName: !Sub codeBuildProject-${CodeCommitRepository}
              Status: ENABLED

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: AppWebServerGP
      ComputePlatform: Server

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: TaggedEC2InstanceGP
      DeploymentStyle: 
        DeploymentType: IN_PLACE
        DeploymentOption: WITH_TRAFFIC_CONTROL
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:
        - Key: Name
          Value: !Ref WebServerGP
          Type: KEY_AND_VALUE
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: TargetLoadBalancerGPNew

      

  # CodePipeline
  AppGPPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: 'app-gp-pipeline' 
      RoleArn: !GetAtt CodePipelineRole.Arn
      PipelineType: V2
      ExecutionMode: QUEUED
      ArtifactStore:
          Type: S3
          Location: !Ref ArtifactStoreS3Location
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              InputArtifacts: []
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                RepositoryName: !Ref CodeCommitRepository
                BranchName: master
        - Name: Build
          Actions:
            - Name: BuildAction
              RunOrder: 1
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: DeployAction
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup

  ArtifactStoreS3Location:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: 'pipeline-gp-webserver'
      VersioningConfiguration:
          Status: Enabled

  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 
                - 'codepipeline.amazonaws.com'
                - 'codebuild.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CodeBuildPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}*'
              - Effect: 'Allow'
                Action:
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}'
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                  - 's3:GetBucketVersioning'
                Resource: 
                  - !GetAtt ArtifactStoreS3Location.Arn
                  - !Sub "${ArtifactStoreS3Location.Arn}/*"
              - Effect: 'Allow'
                Action:
                  - 'codecommit:GitPull'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetRepository'
                  - 'codecommit:ListBranches'
                  - 'codecommit:ListRepositories'
                  - 'codecommit:UploadArchive'
                  - 'codecommit:GetUploadArchiveStatus'
                Resource: !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}'
              - Effect: 'Allow'
                Action:
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:BatchGetProjects'
                  - 'codebuild:ListBuildsForProject'
                Resource: "*"
              - Effect: 'Allow'
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                  - 'codestar-notifications:*'
                  - 'sns:Publish'
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:RunInstances"
                  - "ec2:CreateTags"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "tag:GetTag"
                  - "tag:GetResources"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: "*"
              - Effect: 'Allow'
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: "*"
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  


  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
                - codestar-notifications.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - sns:Subscribe
                  - sns:Receive
                  - sns:ListSubscriptionsByTopic
                  - sns:GetTopicAttributes
                  - sns:Publish
                Resource: '*'
            
  # Lambda Function
  SlackNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        ZipFile: !Sub |
          import json
          import os

          import urllib3

          http = urllib3.PoolManager()

       
          def gen_message_from_codepipeline_event(event_dict):
              """
              Return message according to the CodePipeline state.
              """

              # No message when SUCCEEDED
              if event_dict["detail"]["state"] == "SUCCEEDED":
                  return ""

              if event_dict["detail"]["state"] == "FAILED":
                  message = "CodePipeline state: FAILED"

                  failed_stage = event_dict.get("additionalAttributes", {}).get("failedStage")
                  stage_info = (
                      f"Failed Stage: {failed_stage}"
                      if failed_stage
                      else "Failed Stage: N/A"
                  )
                  message += f"\n{stage_info}"

                  failed_actions = event_dict.get("additionalAttributes", {}).get("failedActions")
                  if failed_actions:
                      # Send only the last try info
                      info_last_action = failed_actions[-1]['additionalInformation']
                      message += f"\nInformation: {info_last_action}"

                  return message


          def handler(event, context):
              """
              Handle CodePipeline notifications and send messages to Slack.
              """
              WEBHOOK_URL_SLACK = "${SlackWebhookURL}"

              try:
                  event_str = event["Records"][0]["Sns"]["Message"]
              except (KeyError, IndexError):
                  print("Error: Event is missing required data")
                  return

              event_dict = json.loads(event_str)

              # generate message
              message = gen_message_from_codepipeline_event(event_dict)
              if not message:
                  print({"statusCode": 200, "body": "No message to return."})
                  return
              region = event_dict["region"]
              pipeline = event_dict["detail"]["pipeline"]
              pipeline_url = f"https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${AppGPPipeline}/view?region=${AWS::Region}"

              # Send Slack webhook
              text = f"{message}\n<{pipeline_url}|Visit CodePipeline>"
              msg = {
                  "channel": "#proyecto",
                  "username": "WEBHOOK_USERNAME",
                  "text": text,
              }
              encoded_msg = json.dumps(msg).encode("utf-8")
              resp = http.request("POST", WEBHOOK_URL_SLACK, body=encoded_msg)
              print({"statusCode": resp.status, "body": "Send message."})

              return
              
  # Create SNS Topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: PipelineNotificationTopic
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt SlackNotificationFunction.Arn

  # SNS Topic Policy to allow publishing
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "codestar-notifications.amazonaws.com"
            Action: "SNS:Publish"
            Resource: !Ref SNSTopic
      Topics: 
        - !GetAtt SNSTopic.TopicArn    

  # SNS Subscription to Lambda
  SNSToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SlackNotificationFunction.Arn
      Protocol: lambda
      TopicArn: !Ref SNSTopic

  # Grant Lambda Permission to be invoked by SNS
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SlackNotificationFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic

  # Notification rules for CodePipeline
  PipelineNotificationRule:
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties:
      DetailType: FULL
      Status: ENABLED
      EventTypeIds:
        - codepipeline-pipeline-pipeline-execution-failed
        - codepipeline-pipeline-pipeline-execution-succeeded
      Name: PipelineNotificationRule
      #Resource: !Ref AppGPPipeline
      Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${AppGPPipeline}'
      Targets:
        - TargetAddress: !Ref SNSTopic
          TargetType: SNS

  # Notification rules for CodeBuild
  CodeBuildNotificationRule:
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties:
      DetailType: FULL
      Status: ENABLED
      EventTypeIds:
        - codebuild-project-build-state-failed
        - codebuild-project-build-state-succeeded
      Name: CodeBuildNotificationRule
      #Resource: !Ref AppGPPipeline
      Resource: !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:${CodeBuildProject}'
      Targets:
        - TargetAddress: !Ref SNSTopic
          TargetType: SNS
  

  
  
    
    

  